(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{170:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"一文读懂-animation-中的时间函数-steps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一文读懂-animation-中的时间函数-steps","aria-hidden":"true"}},[t._v("#")]),t._v(" 一文读懂 Animation 中的时间函数 steps")]),t._v(" "),e("p",[t._v("利用 CSS3 的 Animation 可以创建动画，在许多页面中能够替代 Flash、JS 等，提升页面加载速度。众所周知，Animation 有 8 大属性，如下所述：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("属性名")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("简介")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("animation-name")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("规定需要绑定到选择器的 keyframe 名称")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("animation-duration")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("完成动画所花费的时间，以秒或毫秒计")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("animation-timing-function")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("规定动画的速度曲线")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("animation-delay")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("动画开始前的延迟")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("animation-iteration-count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("动画播放次数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("animation-direction")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("规定是否应该轮流反向播放动画")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("animation-play-state")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("指定动画是否正在运行或已暂停")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("animation-fill-mode")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("当动画不播放时（动画完成或动画延迟），要应用到元素的样式")])])])]),t._v(" "),e("p",[t._v("以上这 8 个属性就决定了 Animation 能够实现一个什么样的动画效果。")]),t._v(" "),e("p",[t._v("本文主要介绍 "),e("code",[t._v("timing-function")]),t._v("中的"),e("code",[t._v("steps()")]),t._v("函数。Animation 在执行动画时默认以 "),e("code",[t._v("ease")]),t._v("函数进行过渡，ease 会在每个关键帧之间插入补间动画，所以动画效果是连贯的。\n除了ease函数之外，"),e("code",[t._v("linear")]),t._v("和"),e("code",[t._v("cubic-bezier")]),t._v("（贝塞尔曲线）等过渡函数也会为其插入补间动画。")]),t._v(" "),e("p",[t._v("但有的时候某些效果不需要补间，只需要在关键帧之间进行跳跃，这时就用到了steps()过渡方式。")]),t._v(" "),e("h4",{attrs:{id:"_1、什么是-steps？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是-steps？","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、什么是 steps？")]),t._v(" "),e("p",[e("code",[t._v("steps()")]),t._v("是 Animation 中的一个"),e("code",[t._v("timing-function")]),t._v("函数， 能够实现动画的阶跃式变化，而非两个状态间的线性过渡。 \n"),e("code",[t._v("steps()")]),t._v(" 接收两个参数：")]),t._v(" "),e("blockquote",[e("p",[t._v("steps ( n, [start | end] )")])]),t._v(" "),e("ul",[e("li",[t._v("第一个参数是一个正值，指定动画分割的段数")]),t._v(" "),e("li",[t._v("第二个参数定义动画执行开始点，可设定为 start 或 end，这个值为可选值，当未传入参数时默认以 end 方式执行")])]),t._v(" "),e("h4",{attrs:{id:"_2、如何使用-steps？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、如何使用-steps？","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、如何使用 steps？")]),t._v(" "),e("p",[t._v("大家都见过很经典的菊花 loading 效果图，其实现原理很简单：\n一张静态图片，然后为其添加动画：")]),t._v(" "),e("blockquote",[e("p",[t._v("设定在固定步数内旋转(rotate) 360 度即可实现 loading 效果，具体实现方式如下：")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<div> \n    <img class = "loading-dot-step" src="./loading.png">\n</div>\n\n...\n.loading-dot-step {\n  animation: loading 1s infinite steps(12,start);\n}\n@keyframes loading {\n  0% {transform: rotate(0deg);}\n  100% {transform: rotate(360deg);}\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("p",[t._v("静态图片如图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p86",alt:"d28d47a5312384f4d49495b747dc59f9.png"}})]),t._v(" "),e("p",[t._v("给上面的静态图片添加动画，steps 设定 12 步完成两个关键帧间的动作轨迹，即从当前状态旋转 360 度，实现下面 gif 的动画效果。")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p87",alt:"22ec24282082019180067d78a434e1e1.gif"}})]),t._v(" "),e("p",[t._v("除了菊花 loading 效果，很常见的还有线性 loading，其实现方式是：\n利用 "),e("code",[t._v("timing-function")]),t._v(" 的 "),e("code",[t._v("linear")]),t._v(" 线性过渡函数，实现图片的连续旋转，此时的效果在视觉上就是连续的动画，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p88",alt:"26a53021e49fc537394c490d76e4dc53.gif"}})]),t._v(" "),e("p",[t._v("对于两种 loading 效果图，第一种为 "),e("code",[t._v("steps")]),t._v(" 方式，第二种为"),e("code",[t._v("线性过渡")]),t._v("方式。\n两者实现原理类似：")]),t._v(" "),e("blockquote",[e("p",[t._v("均在两个关键帧之间将图片从当前状态旋转至 360 度，当 timing-function 设置为 linear 时，从 0% 到 100% 的状态变化为匀速线性变化；\n当动作设定为 steps 时，将从 0 度旋转至 360 度的整个动画分为 12 步执行完，且每步之间是跳跃的，因此出现了经典的菊花 loading 效果。")])]),t._v(" "),e("h4",{attrs:{id:"_3、分清-start-和-end"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、分清-start-和-end","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、分清 start 和 end")]),t._v(" "),e("p",[t._v("steps 的执行点 start 和 end 是许多人存在疑惑的地方，误用 start 和 end 可能会出现和理想情况下不一致的动画效果，许多人分不清两者的区别在哪里，下面以几个简单的 demo 来辅助理解这两个属性值的区别。")]),t._v(" "),e("p",[e("code",[t._v("steps()")]),t._v(" 可简化出 "),e("code",[t._v("step-start")]),t._v(" 和 "),e("code",[t._v("step-end")]),t._v(" 这两个关键字。")]),t._v(" "),e("ul",[e("li",[t._v("step-start 等同 steps ( 1, start ) ，动画分成 1 步，动画执行时以左侧端点为开始")]),t._v(" "),e("li",[t._v("step-end 等同 steps ( 1, end ) ，动画分成 1 步，动画执行时以结尾端点为开始")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<p>1、steps（1， start）</p>\n<div class="a box"></div>\n<p>2、steps（1， end）</p>\n<div class="b box"></div>\n\n...\n.a{\n  animation:changeColor 4s infinite steps(1, start);\n}\n.b{\n  animation:changeColor 4s infinite steps(1, end);\n}\n@keyframes changeColor{\n  0%{ background-color: red; }\n  100%{ background-color: blue; }\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("p",[t._v("上述代码显示效果如下图所示：\n1、steps（1， start）")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p89",alt:"999b40426c1ee5430669be43d195b6e0.png"}})]),t._v(" "),e("p",[t._v("2、steps（1， end）")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p90",alt:"7d05e8f564dcc2aa2a9db5c191256efb.png"}})]),t._v(" "),e("p",[t._v("代码可见，两者设定的均为 1 步执行完动画，实现将 div 的颜色"),e("code",[t._v("从红色变为蓝色")]),t._v("，但是我们看到的结果却是不同的，这就是由于 "),e("code",[t._v("start")]),t._v(" 和 "),e("code",[t._v("end")]),t._v(" 两个属性的执行点不同造成的结果差异。")]),t._v(" "),e("p",[t._v("规范文档中给出了关于 "),e("code",[t._v("steps()")]),t._v(" 的函数图，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p91",alt:"8543b141331fbf04ed951579b81f942d.jpeg"}})]),t._v(" "),e("p",[t._v("对比 steps 函数中的 start 和 end 两个执行点，由上图中步数为 1 的两图可见：")]),t._v(" "),e("ul",[e("li",[t._v("整个动作只有一步，在时间为 0 处，position 设置为 start 时动画的第一步已执行完成")]),t._v(" "),e("li",[t._v("相同情况下，position 设置为 end ，当时间为 0 时动画的第一步尚未开始")])]),t._v(" "),e("p",[t._v("同样，当步数等于 3 时，肉眼可见的 start 的执行点为第一步执行结束的位置，end 的执行点则为第一步尚未开始的位置 。由于动画执行的步数相同但起点不同，因此动画的结束点也不相同，设置为 start 的情况下，结束点为动画结束的最后一步的状态，而 end 为结束前一步的状态。")]),t._v(" "),e("p",[t._v("为了更加直观地展示两者执行的开始点和结束点的区别，本文以横向坐标图的方式对执行过程进行示意：")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p92",alt:"5eabc1db3ae9ad6ce3e8db7491aefeac.png"}})]),t._v(" "),e("ul",[e("li",[t._v("属性值设置为 start 时，在动画开始后，动画的第一段会马上完成。以左侧端点为起点，立即跳到第一个 step 的结尾处，并且保持这样的状态直到第一步的持续时间结束（后面的每一帧都将按照此模式来完成动画）。")]),t._v(" "),e("li",[t._v("属性值设置为 end 时，在动画执行的每一帧中，动画都保持当前状态直到这一段的持续时间完成，才会跳到下一步的起点（后面的每一帧都按照这个模式来进行）。")])]),t._v(" "),e("p",[t._v("现在可以解释上述 demo 中两个 div 颜色显示不一样的原因了，对于 steps 属性值为 start 的 a-box，进入画面时动画的第一阶段已经完成，因此我们不会看到红色，直接显示蓝色；对于 steps 属性值为 end 的 b-box，动画保持第一帧的状态直到结束，因此始终显示为红色。")]),t._v(" "),e("h4",{attrs:{id:"_4、何时使用-steps？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、何时使用-steps？","aria-hidden":"true"}},[t._v("#")]),t._v(" 4、何时使用 steps？")]),t._v(" "),e("p",[t._v("并非所有的动画都是连续的，对于某些非连续变化的效果就需要用到 steps 来实现。 例如钟表秒针阶跃式的转动，或者在动画中模仿人物或动物的脚印行走效果，再或者利用雪碧图实现人物跑动的效果等等。下面详细介绍一下人物跑动效果的实现方式。")]),t._v(" "),e("blockquote",[e("p",[t._v("人物奔跑 demo")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<div class=\"person\"></div>\n\n...\n.person {\n  background: url('person.jpg') no-repeat;\n  background-size: 800%;\n  // 动画名称 持续时间 运动曲线（steps()分为几步）循环次数\n  animation: personBlast .8s steps(7) infinite; \n}\n@keyframes personBlast {\n  0% { background-position: left; }\n  100% { background-position: right; }\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[t._v("其中 person.jpg 为人物动作分割的雪碧图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p93",alt:"a8c05ae4b22e3cacf73788ab59bf8a8a.jpeg"}})]),t._v(" "),e("p",[t._v("本文奔跑动作实现方式为"),e("code",[t._v("将原始雪碧图进行按图形帧数的倍数放大")]),t._v("，然后设定steps 为雪碧图的帧数减 1（8 帧分为 7 步执行完），关键帧的动作为从 (from) 雪碧图左侧阶跃式跳跃到(to)右侧，最终实现下面的跑动效果：")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p94",alt:"666cd74c4d456703a6c41fbf8e9d6247.gif"}})]),t._v(" "),e("p",[t._v("【 注：此奔跑效果的实现方式不尽相同，此处只是其中一种，这样做是为了让大家更好的理解 steps 的应用场景，还有其他更友好的实现方式欢迎大家一起交流 】")]),t._v(" "),e("h4",{attrs:{id:"_5、请注意-！！！"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、请注意-！！！","aria-hidden":"true"}},[t._v("#")]),t._v(" 5、请注意 ！！！")]),t._v(" "),e("p",[t._v("对于 Animation 的 timing-function 有一个需要引起注意的点，即：")]),t._v(" "),e("blockquote",[e("p",[t._v("timing-function 的执行位置为两个关键帧之间，而非整个动画")])]),t._v(" "),e("p",[t._v("此处的 timing-function 指的是本文所讲的 steps 函数以及 linear、ease、cubic-bezier 等函数。\n这里还是通过一个简单的 demo 来了解这个点。首先看一下下面的动画效果：")]),t._v(" "),e("p",[e("img",{attrs:{src:"evernotecid://457479B4-69A2-490F-9145-4981FF917E86/appyinxiangcom/19092618/ENResource/p95",alt:"e2afad170aa3518c01729b46162bc98f.gif"}})]),t._v(" "),e("p",[t._v("实现代码为：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<div class="test test-a"></div>\n<div class="test test-b"></div>\n\n...\n.test-a {\n  animation: changeColorOne 1s steps(1) infinite;\n}\n.test-b {\n  animation: changeColorTwo 1s steps(1) infinite;\n}\n\n@keyframes changeColorOne {\n  0% { background-color: red; }\n  100% { background-color: blue; }\n}\n@keyframes changeColorTwo {\n  0% { background-color: red; }\n  25%{ background-color: blue; }\n  75%{ background-color: red; }\n  100% { background-color: blue; }\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br")])]),e("ul",[e("li",[t._v("对于 class 为 test-a 的 div，为其添加的 changeColorOne 动画为 1 秒内完成 0% 及 100% 两个关键帧之间的颜色变化，其执行位置为 0% 到 100% 之间，因此始终显示红色（不设置 start 还是 end 时默认为 end）")]),t._v(" "),e("li",[t._v("对于 test-b，changeColorTwo 的关键帧有 4 个，因此这时的 steps(1) 的执行位置为 0% - 25% 两个关键帧中间执行一次、25% - 75% 两个关键帧中间执行一次、75% - 100% 两个关键帧中间执行一次，一共执行3次。由于执行点设定为 end， 因此 0% - 25% 显示红色，25% - 75% 显示蓝色，75% - 100% 显示红色，动画整体效果即为上图 gif 所示。")])]),t._v(" "),e("p",[t._v("因此："),e("strong",[t._v("steps 并非作用于整个动画，而是作用于每两个关键帧之间，与动画的时长、播放次数等都无关，所以整个动画的执行时间还是 Animation 中设定的 1s")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"_6、结束语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、结束语","aria-hidden":"true"}},[t._v("#")]),t._v(" 6、结束语")]),t._v(" "),e("p",[t._v("Animation 时间函数中的 steps() 确实不好理解，但是一旦掌握了它会为我们的开发工作带来很大的效率提升，节省很多调试时间，也能帮助我们快速定位问题。 希望本文的讲解可以帮助你更好的理解和使用 steps()。\n感谢阅读，欢迎互相交流！")])])}],!1,null,null,null);a.options.__file="animation.md";s.default=a.exports}}]);